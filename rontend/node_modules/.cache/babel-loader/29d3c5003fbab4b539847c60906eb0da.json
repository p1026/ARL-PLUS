{"remainingRequest":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\src\\views\\table\\src-info.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\src\\views\\table\\src-info.vue","mtime":1759135052000},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\babel.config.js","mtime":1759135052000},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1759192387221},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1759192386775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgeyBmZXRjaFB2LCBwb2xpY3lHcm91cCwgbGlzdHRhc2tHcm91cCwgc2l0ZXRhc2tHcm91cCwgc3JjTGlzdCwgYWRkU3JjLCB1cGRhdGVTcmMsIGJhdGNoZGVsZXRlc3JjIH0gZnJvbSAnQC9hcGkvYXJ0aWNsZSc7CmltcG9ydCB3YXZlcyBmcm9tICdAL2RpcmVjdGl2ZS93YXZlcyc7IC8vIHdhdmVzIGRpcmVjdGl2ZQppbXBvcnQgeyBwYXJzZVRpbWUgfSBmcm9tICdAL3V0aWxzJzsKaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnQC9jb21wb25lbnRzL1BhZ2luYXRpb24nOwp2YXIgY2FsZW5kYXJUeXBlT3B0aW9ucyA9IFt7CiAga2V5OiAnQ04nLAogIGRpc3BsYXlfbmFtZTogJ0NoaW5hJwp9LCB7CiAga2V5OiAnVVMnLAogIGRpc3BsYXlfbmFtZTogJ1VTQScKfSwgewogIGtleTogJ0pQJywKICBkaXNwbGF5X25hbWU6ICdKYXBhbicKfSwgewogIGtleTogJ0VVJywKICBkaXNwbGF5X25hbWU6ICdFdXJvem9uZScKfV07CgovLyBhcnIgdG8gb2JqLCBzdWNoIGFzIHsgQ04gOiAiQ2hpbmEiLCBVUyA6ICJVU0EiIH0KdmFyIGNhbGVuZGFyVHlwZUtleVZhbHVlID0gY2FsZW5kYXJUeXBlT3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7CiAgYWNjW2N1ci5rZXldID0gY3VyLmRpc3BsYXlfbmFtZTsKICByZXR1cm4gYWNjOwp9LCB7fSk7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ29tcGxleFRhYmxlJywKICBjb21wb25lbnRzOiB7CiAgICBQYWdpbmF0aW9uOiBQYWdpbmF0aW9uCiAgfSwKICBkaXJlY3RpdmVzOiB7CiAgICB3YXZlczogd2F2ZXMKICB9LAogIGZpbHRlcnM6IHsKICAgIHN0YXR1c0ZpbHRlcjogZnVuY3Rpb24gc3RhdHVzRmlsdGVyKHN0YXR1cykgewogICAgICB2YXIgc3RhdHVzTWFwID0gewogICAgICAgIGRvbmU6ICdzdWNjZXNzJywKICAgICAgICBlcnJvcjogJ2RhbmdlcicKICAgICAgfTsKICAgICAgcmV0dXJuIHN0YXR1c01hcFtzdGF0dXNdOwogICAgfSwKICAgIHR5cGVGaWx0ZXI6IGZ1bmN0aW9uIHR5cGVGaWx0ZXIodHlwZSkgewogICAgICByZXR1cm4gY2FsZW5kYXJUeXBlS2V5VmFsdWVbdHlwZV07CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcmFuZ2VEYXRhOiBbJ+W4uOinhOa8j+a0nicsICflqIHog4Hmg4XmiqUnLCAn6ZqQ56eB5ZCI6KeEKOWuieWNkyknLCAn6ZqQ56eB5ZCI6KeEKElPUyknXSwKICAgICAgZ2lmdERhdGE6IFsn5Lqs5Lic5Y2hJywgJ+WRqOi+uScsICfnjrDph5EnXSwKICAgICAgbGV2ZWxEYXRhOiBbJ+a0u+i3gycsICfkuIDoiKwnLCAn5rKJ5a+CJ10sCiAgICAgIHBvbGljeWlkOiBbXSwKICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsCiAgICAgIG9yZ0RhdGE6IFtdLAogICAgICB0YWJsZUtleTogMCwKICAgICAgbGlzdDogbnVsbCwKICAgICAgc2VsczogJycsCiAgICAgIC8vIOW9k+WJjemAieahhumAieS4reeahOWAvAogICAgICB0b3RhbDogMCwKICAgICAgbGlzdExvYWRpbmc6IHRydWUsCiAgICAgIGxpc3RRdWVyeTogewogICAgICAgIF9pZDogJycsCiAgICAgICAgcGFnZTogMSwKICAgICAgICBzaXplOiAxMAogICAgICB9LAogICAgICBzb3J0T3B0aW9uczogW3sKICAgICAgICBsYWJlbDogJ+WNh+W6jycsCiAgICAgICAga2V5OiAndGFyZ2V0JwogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICfpmY3luo8nLAogICAgICAgIGtleTogJy10YXJnZXQnCiAgICAgIH1dLAogICAgICBzdGF0dXNPcHRpb25zOiBbJ3Rlc3QnLCAnYmlnJ10sCiAgICAgIHNyY3B0T3B0aW9uczogWyd0ZXN0JywgJ3RvcDEwMCcsICd0b3AxMDAwJywgJ2FsbCddLAogICAgICBsZXZlbHB0T3B0aW9uczogWydkb21haW4nLCAnaXAnXSwKICAgICAgdGFza09wdGlvbnM6IFtdLAogICAgICB0YXNrT3B0aW9uOiBbXSwKICAgICAgc2hvd1Jldmlld2VyOiBmYWxzZSwKICAgICAgdGVtcDogewogICAgICAgIHJhbmdlOiBbXSwKICAgICAgICBnaWZ0OiBbXSwKICAgICAgICB1cmw6ICcnLAogICAgICAgIG5hbWU6ICcnLAogICAgICAgIGxldmVsOiAnJwogICAgICB9LAogICAgICBkaWFsb2dGb3JtVmlzaWJsZTogZmFsc2UsCiAgICAgIGRpYWxvZ1N0YXR1czogJycsCiAgICAgIHRleHRNYXA6IHsKICAgICAgICB1cGRhdGU6ICdFZGl0JywKICAgICAgICBjcmVhdGU6ICdDcmVhdGUnCiAgICAgIH0sCiAgICAgIGxpc3RlbnRhc2s6IHsKICAgICAgICBjcmVhdGU6ICdUYXNrJywKICAgICAgICBzaXRlOiAnU2l0ZScKICAgICAgfSwKICAgICAgbGlzdGVuc2l0ZTogewogICAgICAgIGNyZWF0ZTogJ0NyZWF0ZScKICAgICAgfSwKICAgICAgZGlhbG9nUHZWaXNpYmxlOiBmYWxzZSwKICAgICAgcHZEYXRhOiBbXSwKICAgICAgZG93bmxvYWRMb2FkaW5nOiBmYWxzZQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmxpc3RRdWVyeS5faWQgPSB0aGlzLiRyb3V0ZS5xdWVyeS5faWQ7CiAgICB0aGlzLmxpc3RRdWVyeS5zY29wZV9pZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LnNjb3BlX2lkOwogICAgdGhpcy5nZXRMaXN0KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICByZW1vdmVUYWc6IGZ1bmN0aW9uIHJlbW92ZVRhZygpIHsKICAgICAgdGhpcy50ZW1wLnJhbmdlID0gW107CiAgICB9LAogICAgc2VsZWN0QWxsOiBmdW5jdGlvbiBzZWxlY3RBbGwoKSB7CiAgICAgIHRoaXMudGVtcC5yYW5nZSA9IHRoaXMucmFuZ2VEYXRhOwogICAgfSwKICAgIHJlbW92ZVRhZzE6IGZ1bmN0aW9uIHJlbW92ZVRhZzEoKSB7CiAgICAgIHRoaXMudGVtcC5naWZ0ID0gW107CiAgICB9LAogICAgc2VsZWN0QWxsMTogZnVuY3Rpb24gc2VsZWN0QWxsMSgpIHsKICAgICAgdGhpcy50ZW1wLmdpZnQgPSB0aGlzLmdpZnREYXRhOwogICAgfSwKICAgIGdldExpc3Q6IGZ1bmN0aW9uIGdldExpc3QoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHRoaXMubGlzdExvYWRpbmcgPSB0cnVlOwogICAgICBzcmNMaXN0KHRoaXMubGlzdFF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzLmxpc3QgPSByZXNwb25zZS5pdGVtczsKICAgICAgICBfdGhpcy50b3RhbCA9IHJlc3BvbnNlLnRvdGFsOwogICAgICAgIF90aGlzLnRhc2tPcHRpb25zID0gcmVzcG9uc2UuaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS5zY29wZV9hcnJheTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gSnVzdCB0byBzaW11bGF0ZSB0aGUgdGltZSBvZiB0aGUgcmVxdWVzdAogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMubGlzdExvYWRpbmcgPSBmYWxzZTsKICAgICAgICB9LCAxICogMTAwMCk7CiAgICAgIH0pOwogICAgfSwKICAgIGluZGV4TWV0aG9kOiBmdW5jdGlvbiBpbmRleE1ldGhvZChpbmRleCkgewogICAgICByZXR1cm4gaW5kZXggKyAxOwogICAgfSwKICAgIGhhbmRsZUZpbHRlcjogZnVuY3Rpb24gaGFuZGxlRmlsdGVyKCkgewogICAgICB0aGlzLmdldExpc3QoKTsKICAgIH0sCiAgICBzb3J0QnlJRDogZnVuY3Rpb24gc29ydEJ5SUQob3JkZXIpIHsKICAgICAgaWYgKG9yZGVyID09PSAnYXNjZW5kaW5nJykgewogICAgICAgIHRoaXMubGlzdFF1ZXJ5LnNvcnQgPSAnK2lkJzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmxpc3RRdWVyeS5zb3J0ID0gJy1pZCc7CiAgICAgIH0KICAgICAgdGhpcy5oYW5kbGVGaWx0ZXIoKTsKICAgIH0sCiAgICByZXNldFRlbXA6IGZ1bmN0aW9uIHJlc2V0VGVtcCgpIHsKICAgICAgdGhpcy50ZW1wID0gewogICAgICAgIHNjb3BlX3R5cGU6ICcnLAogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHNjb3BlOiAnJwogICAgICB9OwogICAgfSwKICAgIGhhbmRsZUNyZWF0ZTogZnVuY3Rpb24gaGFuZGxlQ3JlYXRlKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgdGhpcy5yZXNldFRlbXAoKTsKICAgICAgdGhpcy5kaWFsb2dTdGF0dXMgPSAnY3JlYXRlJzsKICAgICAgdGhpcy5kaWFsb2dGb3JtVmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuJHJlZnNbJ2RhdGFGb3JtJ10uY2xlYXJWYWxpZGF0ZSgpOwogICAgICB9KTsKICAgIH0sCiAgICBncm91cHRhc2tDcmVhdGU6IGZ1bmN0aW9uIGdyb3VwdGFza0NyZWF0ZShyb3cpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIHRoaXMuZGlhbG9nU3RhdHVzID0gJ2NyZWF0ZSc7CiAgICAgIHZhciBpZHggPSB0aGlzLm5ld2luZGV4TWV0aG9kKHJvdy5faWQpOwogICAgICB0aGlzLnRlbXAuc2NvcGVfaWQgPSByb3cuX2lkOwogICAgICB0aGlzLnRlbXAubmFtZSA9ICcnOwogICAgICB0aGlzLm9yZ0RhdGEgPSBbXTsKICAgICAgdGhpcy50ZW1wLnBvbGljeV9pZCA9ICcnOwogICAgICB0aGlzLnRlbXAuaW50ZXJ2YWwgPSAyNDsKICAgICAgdGhpcy50YXNrT3B0aW9uID0gdGhpcy50YXNrT3B0aW9uc1tpZHhdOwogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgICBwb2xpY3lHcm91cCgxMDAwKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzMy5wb2xpY3lpZCA9IHJlc3BvbnNlLml0ZW1zOwogICAgICB9KTsKICAgIH0sCiAgICBncm91cHNpdGVDcmVhdGU6IGZ1bmN0aW9uIGdyb3Vwc2l0ZUNyZWF0ZShyb3cpIHsKICAgICAgdGhpcy5kaWFsb2dTdGF0dXMgPSAnc2l0ZSc7CiAgICAgIHRoaXMudGVtcC5zY29wZV9pZCA9IHJvdy5faWQ7CiAgICAgIHRoaXMudGVtcC5pbnRlcnZhbCA9IDI0OwogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlOwogICAgfSwKICAgIGNyZWF0ZURhdGE6IGZ1bmN0aW9uIGNyZWF0ZURhdGEoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy4kcmVmc1snZGF0YUZvcm0nXS52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgIG5hbWU6IF90aGlzNC50ZW1wLm5hbWUsCiAgICAgICAgICB1cmw6IF90aGlzNC50ZW1wLnVybCwKICAgICAgICAgIGxldmVsOiBfdGhpczQudGVtcC5sZXZlbCwKICAgICAgICAgIHJhbmdlOiBfdGhpczQudGVtcC5yYW5nZSwKICAgICAgICAgIGdpZnQ6IF90aGlzNC50ZW1wLmdpZnQKICAgICAgICB9OwogICAgICAgIGFkZFNyYyhkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICBfdGhpczQuZGlhbG9nRm9ybVZpc2libGUgPSBmYWxzZTsKICAgICAgICAgICAgX3RoaXM0LiRub3RpZnkoewogICAgICAgICAgICAgIHRpdGxlOiAn5oiQ5YqfJywKICAgICAgICAgICAgICBtZXNzYWdlOiAn5Yib5bu65oiQ5YqfJywKICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF90aGlzNC5nZXRMaXN0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAvLyDlpITnkIbor7fmsYLlvILluLgKICAgICAgICAgIF90aGlzNC4kbm90aWZ5KHsKICAgICAgICAgICAgdGl0bGU6ICflpLHotKUnLAogICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLAogICAgICAgICAgICB0eXBlOiAnZXJyb3InLAogICAgICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZVVwZGF0ZTogZnVuY3Rpb24gaGFuZGxlVXBkYXRlKHJvdykgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlcXVlbmNlcwogICAgICB0aGlzLnRlbXAubmFtZSA9IHJvdy5uYW1lOwogICAgICB0aGlzLnRlbXAuX2lkID0gcm93Ll9pZDsKICAgICAgdGhpcy50ZW1wLnVybCA9IHJvdy51cmw7CiAgICAgIHRoaXMudGVtcC5sZXZlbCA9IHJvdy5sZXZlbDsKICAgICAgdGhpcy50ZW1wLnJhbmdlID0gcm93LnJhbmdlOwogICAgICB0aGlzLnRlbXAuZ2lmdCA9IHJvdy5naWZ0OwogICAgICB0aGlzLmRpYWxvZ1N0YXR1cyA9ICd1cGRhdGUnOwogICAgICB0aGlzLmRpYWxvZ0Zvcm1WaXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNS4kcmVmc1snZGF0YUZvcm0nXS5jbGVhclZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgfSwKICAgIGxpc3RUYXNrOiBmdW5jdGlvbiBsaXN0VGFzaygpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlOwogICAgICB2YXIgZGF0YSA9IHsKICAgICAgICBuYW1lOiB0aGlzLnRlbXAubmFtZSA/IHRoaXMudGVtcC5uYW1lIDogJycsCiAgICAgICAgaW50ZXJ2YWw6IHRoaXMudGVtcC5pbnRlcnZhbCAqIDM2MDAsCiAgICAgICAgZG9tYWluOiB0aGlzLm9yZ0RhdGEuam9pbignLCcpLAogICAgICAgIHBvbGljeV9pZDogdGhpcy50ZW1wLnBvbGljeV9pZCwKICAgICAgICBzY29wZV9pZDogdGhpcy50ZW1wLnNjb3BlX2lkCiAgICAgIH07CiAgICAgIGxpc3R0YXNrR3JvdXAoZGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICBfdGhpczYuJG5vdGlmeSh7CiAgICAgICAgICAgIHRpdGxlOiAn5oiQ5YqfJywKICAgICAgICAgICAgbWVzc2FnZTogJ+WIm+W7uuaIkOWKnycsCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgLy8g5aSE55CG6K+35rGC5byC5bi4CiAgICAgICAgX3RoaXM2LiRub3RpZnkoewogICAgICAgICAgdGl0bGU6ICflpLHotKUnLAogICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwKICAgICAgICAgIHR5cGU6ICdlcnJvcicsCiAgICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBzaXRlVGFzazogZnVuY3Rpb24gc2l0ZVRhc2soKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZTsKICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgaW50ZXJ2YWw6IHRoaXMudGVtcC5pbnRlcnZhbCAqIDM2MDAsCiAgICAgICAgc2NvcGVfaWQ6IHRoaXMudGVtcC5zY29wZV9pZAogICAgICB9OwogICAgICBzaXRldGFza0dyb3VwKGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUgPT09IDIwMCkgewogICAgICAgICAgX3RoaXM3LiRub3RpZnkoewogICAgICAgICAgICB0aXRsZTogJ+aIkOWKnycsCiAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UsCiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgLy8g5aSE55CG6K+35rGC5byC5bi4CiAgICAgICAgX3RoaXM3LiRub3RpZnkoewogICAgICAgICAgdGl0bGU6ICflpLHotKUnLAogICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwKICAgICAgICAgIHR5cGU6ICdlcnJvcicsCiAgICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBuZXdpbmRleE1ldGhvZDogZnVuY3Rpb24gbmV3aW5kZXhNZXRob2QoaWQpIHsKICAgICAgLy8g5YGH6K6+IHRoaXMudGFibGVEYXRhIOaYr+S9oOeahOihqOagvOaVsOaNrgogICAgICByZXR1cm4gdGhpcy5saXN0LmZpbmRJbmRleChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgcmV0dXJuIHJvdy5faWQgPT09IGlkOwogICAgICB9KTsKICAgIH0sCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGlvbkNoYW5nZShzZWxzKSB7CiAgICAgIHRoaXMuc2VscyA9IHNlbHM7CiAgICB9LAogICAgYmF0Y2hEZWxlY3QxOiBmdW5jdGlvbiBiYXRjaERlbGVjdDEocm93KSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwogICAgICBjb25zb2xlLmxvZyhyb3cuX2lkKTsKICAgICAgLy8g5Yig6Zmk5YmN55qE5o+Q56S6CiAgICAgIHRoaXMuJGNvbmZpcm0oJ+ehruiupOWIoOmZpOiusOW9leWQlz8nLCAn5o+Q56S6JywgewogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgIF9pZDogcm93Ll9pZAogICAgICAgIH07CiAgICAgICAgYmF0Y2hkZWxldGVzcmMoZGF0YSk7CiAgICAgICAgX3RoaXM4LiRub3RpZnkoewogICAgICAgICAgdGl0bGU6ICfmiJDlip8nLAogICAgICAgICAgbWVzc2FnZTogJ+WIoOmZpOaIkOWKnycsCiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICAgIH0pOwogICAgICAgIF90aGlzOC5nZXRMaXN0KCk7CiAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZUZldGNoUHY6IGZ1bmN0aW9uIGhhbmRsZUZldGNoUHYocHYpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CiAgICAgIGZldGNoUHYocHYpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM5LnB2RGF0YSA9IHJlc3BvbnNlLmRhdGEucHZEYXRhOwogICAgICAgIF90aGlzOS5kaWFsb2dQdlZpc2libGUgPSB0cnVlOwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGVEYXRhOiBmdW5jdGlvbiB1cGRhdGVEYXRhKCkgewogICAgICB2YXIgX3RoaXMwID0gdGhpczsKICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7CiAgICAgIHRoaXMuJHJlZnNbJ2RhdGFGb3JtJ10udmFsaWRhdGUoZnVuY3Rpb24gKHZhbGlkKSB7CiAgICAgICAgdmFyIHRlbXBEYXRhID0gewogICAgICAgICAgX2lkOiBfdGhpczAudGVtcC5faWQsCiAgICAgICAgICBuYW1lOiBfdGhpczAudGVtcC5uYW1lLAogICAgICAgICAgdXJsOiBfdGhpczAudGVtcC51cmwsCiAgICAgICAgICBsZXZlbDogX3RoaXMwLnRlbXAubGV2ZWwsCiAgICAgICAgICByYW5nZTogX3RoaXMwLnRlbXAucmFuZ2UsCiAgICAgICAgICBnaWZ0OiBfdGhpczAudGVtcC5naWZ0CiAgICAgICAgfTsKICAgICAgICB1cGRhdGVTcmModGVtcERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICBpZiAocmVzcG9uc2UuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIF90aGlzMC5kaWFsb2dGb3JtVmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICBfdGhpczAuJG5vdGlmeSh7CiAgICAgICAgICAgICAgdGl0bGU6ICfmiJDlip8nLAogICAgICAgICAgICAgIG1lc3NhZ2U6ICfmm7TmlrDmiJDlip8nLAogICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMwLmdldExpc3QoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIC8vIOWkhOeQhuivt+axguW8guW4uAogICAgICAgICAgX3RoaXMwLiRub3RpZnkoewogICAgICAgICAgICB0aXRsZTogJ+Wksei0pScsCiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsCiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsCiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlRG93bmxvYWQ6IGZ1bmN0aW9uIGhhbmRsZURvd25sb2FkKCkgewogICAgICB2YXIgX3RoaXMxID0gdGhpczsKICAgICAgdGhpcy5kb3dubG9hZExvYWRpbmcgPSB0cnVlOwogICAgICBpbXBvcnQoJ0AvdmVuZG9yL0V4cG9ydDJFeGNlbCcpLnRoZW4oZnVuY3Rpb24gKGV4Y2VsKSB7CiAgICAgICAgdmFyIHRIZWFkZXIgPSBbJ+S7u+WKoScsICfnm67moIcnLCAn54q25oCBJywgJ+W8gOWni+aXtumXtCcsICfnu5PmnZ/ml7bpl7QnXTsKICAgICAgICB2YXIgZmlsdGVyVmFsID0gWyduYW1lJywgJ3RhcmdldCcsICdzdGF0dXMnLCAnc3RhcnRfdGltZScsICdlbmRfdGltZSddOwogICAgICAgIHZhciBkYXRhID0gX3RoaXMxLmZvcm1hdEpzb24oZmlsdGVyVmFsKTsKICAgICAgICBleGNlbC5leHBvcnRfanNvbl90b19leGNlbCh7CiAgICAgICAgICBoZWFkZXI6IHRIZWFkZXIsCiAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgZmlsZW5hbWU6ICfku7vliqHooagnCiAgICAgICAgfSk7CiAgICAgICAgX3RoaXMxLmRvd25sb2FkTG9hZGluZyA9IGZhbHNlOwogICAgICB9KTsKICAgIH0sCiAgICBmb3JtYXRKc29uOiBmdW5jdGlvbiBmb3JtYXRKc29uKGZpbHRlclZhbCkgewogICAgICByZXR1cm4gdGhpcy5saXN0Lm1hcChmdW5jdGlvbiAodikgewogICAgICAgIHJldHVybiBmaWx0ZXJWYWwubWFwKGZ1bmN0aW9uIChqKSB7CiAgICAgICAgICBpZiAoaiA9PT0gJ3RpbWVzdGFtcCcpIHsKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVGltZSh2W2pdKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB2W2pdOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRTb3J0Q2xhc3M6IGZ1bmN0aW9uIGdldFNvcnRDbGFzcyhrZXkpIHsKICAgICAgdmFyIG9yZGVyID0gdGhpcy5saXN0UXVlcnkub3JkZXI7CiAgICAgIHJldHVybiBvcmRlciA9PT0gIisiLmNvbmNhdChrZXkpID8gJ2FzY2VuZGluZycgOiAnZGVzY2VuZGluZyc7CiAgICB9CiAgfQp9Ow=="},null]}