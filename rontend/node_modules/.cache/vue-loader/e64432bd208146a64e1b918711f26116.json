{"remainingRequest":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\src\\views\\table\\github-info.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\src\\views\\table\\github-info.vue","mtime":1759135052000},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1759192387221},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"C:\\Users\\PengYingJie\\Desktop\\ARL\\rontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1759192386775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}