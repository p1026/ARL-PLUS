{"remainingRequest":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\src\\views\\table\\github-info.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\src\\views\\table\\github-info.vue","mtime":1759135052000},{"path":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1759192387221},{"path":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759192384647},{"path":"D:\\DawnLauncher\\PKEY\\Project\\Vue\\rontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1759192386775}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["github-info.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"github-info.vue","sourceRoot":"src/views/table","sourcesContent":["upfinger-info.vue\n<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input\n        v-model=\"listQuery.name\"\n        placeholder=\"名称\"\n        style=\"width: 200px\"\n        class=\"filter-item\"\n        @keyup.enter.native=\"handleFilter\"\n      />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n      <el-input\n        v-model=\"listQuery.keyword\"\n        placeholder=\"关键字\"\n        style=\"width: 200px\"\n        class=\"filter-item\"\n        @keyup.enter.native=\"handleFilter\"\n      />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n      <el-input\n        v-model=\"listQuery.status\"\n        placeholder=\"状态\"\n        style=\"width: 200px\"\n        class=\"filter-item\"\n        @keyup.enter.native=\"handleFilter\"\n      />\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        {{ $t('table.search') }}\n      </el-button>\n      <br>\n      <br>\n      <el-button type=\"success\" class=\"filter-item\" @click=\"gittask\">添加任务</el-button>\n      <el-button type=\"danger\" class=\"filter-item\" @click=\"gitbatchDelect\">批量删除</el-button>\n      <el-button type=\"warning\" class=\"filter-item\" @click=\"gitbatchStop\">批量停止</el-button>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @selection-change=\"handleSelectionChange\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column type=\"selection\" width=\"40\" /> <!-- 添加复选框列 -->\n      <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\" width=\"60\" label=\"序号\" />\n      <el-table-column label=\"名称\" min-width=\"89px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span class=\"link-type\" @click=\"togithubdata(row)\">{{ row.name }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"关键字\" min-width=\"89px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.keyword }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"结果数目\" min-width=\"89px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.statistic? row.statistic.github_result_cnt : '-' }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"状态\" min-width=\"89px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.status }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"开始时间\" width=\"250px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.start_time }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.update_time')\" width=\"250px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.end_time }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.actions')\"\n        align=\"center\"\n        width=\"400\"\n        class-name=\"small-padding fixed-width\"\n      >\n        <template slot-scope=\"{row}\">\n          <el-button size=\"mini\" type=\"danger\" @click=\"gitbatchDelect1(row)\">\n            {{ $t('table.delete') }}\n          </el-button>\n          <el-button size=\"mini\" type=\"warning\" @click=\"gitbatchStop1(row)\" :disabled=\"row.status === 'stop'\">\n            {{ $t('table.draft') }}\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination\n      v-show=\"total>0\"\n      :total=\"total\"\n      :page.sync=\"listQuery.page\"\n      :limit.sync=\"listQuery.size\"\n      @pagination=\"getList\"\n    />\n    <el-dialog title=\"新建任务\" :visible.sync=\"dialogVisible\">\n      <el-form\n        ref=\"dataForm\"\n        :rules=\"rules\"\n        :model=\"temp\"\n        label-position=\"left\"\n        label-width=\"70px\"\n        style=\"width: 400px; margin-left:50px;\"\n      >\n        <el-form-item label=\"名称\" required>\n          <el-input v-model=\"temp.name\" />\n        </el-form-item>\n        <el-form-item label=\"关键字\" required>\n          <el-input\n            v-model=\"temp.keyword\"\n            :autosize=\"{ minRows: 4, maxRows: 8}\"\n            type=\"textarea\"\n          />\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addtask\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport {\n  fetchPv,\n  updateArticle,\n  startArticle,\n  stopArticle,\n  pocSync, gitList, gitcreate, gitDelect, gitStop\n} from '@/api/article'\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination'\nimport Cookies from 'js-cookie'\n\nconst calendarTypeOptions = [\n  { key: 'CN', display_name: 'China' },\n  { key: 'US', display_name: 'USA' },\n  { key: 'JP', display_name: 'Japan' },\n  { key: 'EU', display_name: 'Eurozone' }\n]\n\n// arr to obj, such as { CN : \"China\", US : \"USA\" }\nconst calendarTypeKeyValue = calendarTypeOptions.reduce((acc, cur) => {\n  acc[cur.key] = cur.display_name\n  return acc\n}, {})\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        done: 'success',\n        error: 'danger'\n      }\n      return statusMap[status]\n    },\n    typeFilter(type) {\n      return calendarTypeKeyValue[type]\n    }\n  },\n\n  data() {\n    return {\n      token: Cookies.get('Admin-Token'),\n      dialogVisible: false,\n      tableKey: 0,\n      list: null,\n      sels: '', // 当前选框选中的值\n      total: 0,\n      listQuery: {\n        page: 1,\n        size: 10,\n        keyword: '',\n        name: '',\n        status: ''\n      },\n      sortOptions: [{ label: '升序', key: 'target' }, { label: '降序', key: '-target' }],\n      statusOptions: ['test', 'big'],\n      srcptOptions: ['test', 'top100', 'top1000', 'all'],\n      levelptOptions: ['test', 'top100', 'top1000', 'all'],\n      showReviewer: false,\n      temp: {\n        keyword: '',\n        name: '',\n        domain_brute_type: 'big',\n        port_scan_type: 'top100'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      dialogPvVisible: false,\n      pvData: [],\n      downloadLoading: false\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    addtask() {\n      this.dialogVisible = false\n      const result = {\n        keyword: this.temp.keyword,\n        name: this.temp.name\n      }\n      if (!this.temp.name) {\n        this.$message({\n          message: '名称不能为空',\n          type: 'warning'\n        })\n        return\n      }\n      gitcreate(result).then(response => {\n        this.dialogFormVisible = false\n        if (response.code === 200) {\n          this.$notify({\n            title: '成功',\n            message: '创建成功',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        }\n      }).catch(error => {\n        // Handle the error\n        console.error(error)\n        this.$notify({\n          title: '失败',\n          message: error,\n          type: 'error',\n          duration: 2000\n        })\n      })\n    },\n    togithubdata(row) {\n      this.$router.push({\n        path: '/github/githubdata-info',\n        query: {\n          _id: row._id\n        }\n      })\n    },\n    gittask() {\n      // eslint-disable-next-line no-sequences\n      this.temp.name = ''\n      this.temp.keyword = ''\n      this.dialogStatus = 'create'\n      this.dialogVisible = true\n    },\n    getList() {\n      this.listLoading = true\n      gitList(this.listQuery).then(response => {\n        this.list = response.items\n        this.total = response.total\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1 * 1000)\n      })\n    },\n    indexMethod(index) {\n      return index + 1\n    },\n    handleFilter() {\n      this.getList()\n    },\n    handleModifyStatus_stop(row, status) {\n      stopArticle(row)\n      this.$message({\n        message: '操作成功',\n        type: 'success'\n      })\n      row.status = status\n    },\n    handleModifyStatus_start(row, status) {\n      startArticle(row)\n      this.$message({\n        message: '操作成功',\n        type: 'success'\n      })\n      row.status = status\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    handleCreate() {\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          updateArticle(tempData.uid, tempData).then(() => {\n            const index = this.list.findIndex(v => v.id === this.temp.id)\n            this.list.splice(index, 1, this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: '成功',\n              message: '更新成功',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleSelectionChange(sels) {\n      this.sels = sels\n    },\n    // 批量删除执行操作\n    figupload() {\n      pocSync()\n      this.$notify({\n        title: '成功',\n        message: '更新成功',\n        type: 'success',\n        duration: 2000\n      })\n      setTimeout(() => {\n        location.reload()\n      }, 1000)\n    },\n    gitbatchDelect() {\n      // 删除前的提示\n      this.$confirm('确认删除记录吗?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        const data = {\n          _id: this.sels.map((item) => item._id)\n        }\n        gitDelect(data).then(response => {\n          if (response.code === 200) {\n            // 如果返回的code不是200，则显示错误信息\n            this.$notify({\n              title: '成功',\n              message: '删除成功',\n              type: 'success',\n              duration: 2000\n            })\n            this.getList()\n          }\n        }).catch(error => {\n          // 处理请求异常\n          this.$notify({\n            title: '失败',\n            message: error.message,\n            type: 'error',\n            duration: 2000\n          })\n        })\n      })\n    },\n    gitbatchDelect1(row) {\n      // 删除前的提示\n      this.$confirm('确认删除记录吗?', '提示', {\n        type: 'warning'\n      }).then(() => {\n        const data = {\n          _id: [row._id]\n        }\n        gitDelect(data).then(response => {\n          if (response.code === 200) {\n            // 如果返回的code不是200，则显示错误信息\n            this.$notify({\n              title: '成功',\n              message: '删除成功',\n              type: 'success',\n              duration: 2000\n            })\n            this.getList()\n          }\n        }).catch(error => {\n          // 处理请求异常\n          this.$notify({\n            title: '失败',\n            message: error.message,\n            type: 'error',\n            duration: 2000\n          })\n        })\n      })\n    },\n    gitbatchStop() {\n      const data = {\n        _id: this.sels.map((item) => item._id)\n      }\n      gitStop(data).then(response => {\n        if (response.code === 200) {\n          // 如果返回的code不是200，则显示错误信息\n          this.$notify({\n            title: '成功',\n            message: '停止成功',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        }\n      }).catch(error => {\n        // 处理请求异常\n        this.$notify({\n          title: '失败',\n          message: error.message,\n          type: 'error',\n          duration: 2000\n        })\n      })\n    },\n    gitbatchStop1(row) {\n      const data = {\n        _id: [row._id]\n      }\n      gitStop(data).then(response => {\n        if (response.code === 200) {\n          // 如果返回的code不是200，则显示错误信息\n          this.$notify({\n            title: '成功',\n            message: '停止成功',\n            type: 'success',\n            duration: 2000\n          })\n          this.getList()\n        }\n      }).catch(error => {\n        // 处理请求异常\n        this.$notify({\n          title: '失败',\n          message: error.message,\n          type: 'error',\n          duration: 2000\n        })\n      })\n    },\n    handleFetchPv(pv) {\n      fetchPv(pv).then(response => {\n        this.pvData = response.data.pvData\n        this.dialogPvVisible = true\n      })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = ['任务', '目标', '状态', '开始时间', '结束时间']\n        const filterVal = ['name', 'target', 'status', 'start_time', 'end_time']\n        const data = this.formatJson(filterVal)\n        excel.export_json_to_excel({\n          header: tHeader,\n          data,\n          filename: '任务表'\n        })\n        this.downloadLoading = false\n      })\n    },\n    formatJson(filterVal) {\n      return this.list.map(v => filterVal.map(j => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      }))\n    },\n    getSortClass: function(key) {\n      const order = this.listQuery.order\n      return order === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"]}]}